{"version":3,"sources":["reducers.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/ScrollComponent.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Card","props","robot","name","id","email","className","src","alt","CardList","map","i","key","SearchBox","onInputChange","type","placeholder","onChange","ScrollComponent","style","overflowY","border","height","children","App","this","onRequestRobots","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e330442f.chunk.js","sourcesContent":["import { \n\tCHANGE_SEARCH_FIELD, \n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\trobots: [],\n\tisPending: false,\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true});\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\n\nconst Card = (props) => {\n\tconst {name, id, email} = props.robot;\n\treturn (\n\t\t<div className='tc dib ba b--black br3 pa3 ma3 bg-light-red shadow-5 grow'>\n\t\t\t<h3> {name} </h3>\n\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robot\"/>\n\t\t\t<p> {email} </p>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{robots.map((robot, i) => {\n\t\t\t\treturn <Card key={i} robot={robot}/>\n\t\t\t})}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({onInputChange}) => {\n\treturn(\n\t\t<div className='tc'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue br2'\n\t\t\t\ttype='text' \n\t\t\t\tplaceholder='Enter Robot Name'\n\t\t\t\tonChange={ onInputChange }\n\t\t\t/>\n\t\t</div>\n\t);\t\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst ScrollComponent = (props) => {\n\treturn(\n\t\t<div className='mt3' style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default ScrollComponent;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport ScrollComponent from '../Components/ScrollComponent';\nimport { setSearchField, requestRobots } from '../actions.js';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonInputChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots()\n\t}\n\t\n\trender() {\n\t\tconst { searchField, onInputChange, robots, isPending } = this.props;\n\n\t\tlet filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\n\t\treturn isPending ?\n\t\t\t<h1> Loading </h1> :\n\t\t(\n\t    <div className=\"App tc\">\n\t      <h1 className='f1 tc'>ROBOFRIENDS</h1>\n\t      <SearchBox onInputChange={onInputChange}/>\n\t      <ScrollComponent>\n\t      \t<CardList robots={filteredRobots} />\n\t      </ScrollComponent>\n\t    </div>\n\t  );\n\t} \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD, \n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants'\n\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n\n\n\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store} >\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\t\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}